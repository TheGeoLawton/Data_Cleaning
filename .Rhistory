export RSTUDIO_WHICH_R=/usr/local/bin/R
which r
which R
plot(cars,main="Hello, Coursera")
dist(iris)
head(iris)
dist(iris[1:4])
d <- dist(iris[1:4])
hclust(d)
hc <- hclust(d)
plot(hc)
hc
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
install.packages("XML")
library(XML)
install.packages("XML")
install.packages("XML")
library(XML)
library(curl)
doc <- xmlTreeParse("http://www.xmlteam.com/tsn/progressive/samples/nhl/xt.nhl.21100-EVS-20090325T221959-0500.xml")
rootNode <- xmlRoot(doc)
xmlname(rootNode)
xmlName(rootNode)
xmlNamespace(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[15]]
rootNode[[2]]
rootNode[[3]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
rootNode[[1]][[3]]
rootNode[[1]][[2]]
rootNode[[2]][[2]]
rootNode[[2]][[3]]
xmlSApply("//name", print)
xmlSApply(rootNode, sum)
xmlSize(rootNode)
xmlAttrs(rootNode)
xmlAttrs(rootNode[[1]])
xmlSApply(rootNode,xmlName)
xmlSApply(rootNode[[1]],xmlName)
xmlSApply(rootNode[[2]],xmlName)
xmlSApply(rootNode[[1:2]],xmlName)
rootNode[[1:2]]
library(ggplot2)
ggplot(iris, coord(polar))
ggplot(iris, coord("polar"))
ggplot(iris)
ggplot(iris) + coord_polar() + geom_bar()
ggplot(iris, aes(sepal.length)) + coord_polar() + geom_line()
ggplot(iris, aes(~sepal.length)) + coord_polar() + geom_line()
ggplot(iris, aes(x=1:4)) + coord_polar() + geom_line()
ggplot(iris, aes()) + coord_polar() + geom_line()
source("http://pcwww.liv.ac.uk/~william/Geodemographic%20Classifiability/func%20CreateRadialPlot.r")
CreateRadialPlot()
CreateRadialPlot
CreateRadialPlot(iris)
CreateRadialPlot(iris[1:4])
head(iris)
CreateRadialPlot(iris[1:4], grid.max = 10)
CreateRadialPlot(iris[1:4], grid.max = 8)
ggplot(iris, aes(Sepal.Length)) + coord_polar() + geom_line()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
print(cran)
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package== "swirl")
filter(cran, r_version== "3.1.1", country =="US")
?Comparison
filter(cran, r_version <= "3.0.2", country =="IN")
filter(cran, country == "US" | country =="IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
cran2 %>% arrange(country, desc(r_version), ip_id)
arrange(cran2,country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb= size / 2^20)
mutate(cran3, size_mb= size / 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb= size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size +1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by(cran, package)
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = .99)
filter(pack_sum, count>679)
top_counts <- filter(pack_sum, count>679)
top_counts
view(top_counts)
View(top_counts)
arrange(top_counts, count)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted\)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = .99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique)
)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("jpeg")
install.packages("jpeg")
install.packages("jpeg")
source('~/Desktop/R Data/Data_Cleaning/run_analysis.R')
setwd("~/Desktop/R Data/Data_Cleaning")
source('~/Desktop/R Data/Data_Cleaning/run_analysis.R')
source('~/Desktop/R Data/Data_Cleaning/run_analysis.R')
which(wanted)
?which
wanted
wanted <- (grepl("mean()", names(xdat))|grepl("std()", names(xdat)))
wanted
grepl("mean()", names(xdat))
View(xdat)
names(xdat) <- read.table("features.txt")[2]
View(xdat)
View(ydat)
View(xdat)
source('~/Desktop/R Data/Data_Cleaning/run_analysis.R')
names(xdat) <- read.table("features.txt") %>% select(v.2)
names(xdat) <- read.table("features.txt") %>% select(V.2)
source('~/Desktop/R Data/Data_Cleaning/run_analysis.R')
names(xdat)
read.table("features.txt") %>% select(V.2)
read.table("features.txt") %>% select(v.2)
read.table("features.txt") %>% select(V2)
source('~/Desktop/R Data/Data_Cleaning/run_analysis.R')
names(xdat)
View(xdat)
View(xdat)
names(xdat)
View(xdat)
read.table("features.txt") %>% select(V2)
names(xdat) <- as.character(read.table("features.txt") %>% select(V2))
names(xdat)
View(xdat)
